import angular from 'angular';
const moduleName = 'npm-ui.shell';

angular.module(moduleName, [])
  .controller('ShellController', /*@ngInject*/ function HomeController($log, $rootScope, $scope, $window, npmFactory, loadingService) {

    const installVersionPackage = () => {

      this.errorUpdating = undefined;
      this.updating = true;
      loadingService.loading();
      npmFactory.update(this.selectedPackage.name, this.projectPath, this.selectedVersion, this.selectedEnv)
      .then(() => {

        $scope.$evalAsync(() => {
          this.showVersionDialog = undefined;
          this.updating = undefined;
          this.errorUpdating = undefined;
          loadingService.finished();
        });
      }).catch((err) => {

        $log.error('Error updating lib', err);

        $scope.$evalAsync(() => {
          this.errorUpdating = true;
          this.updating = undefined;
          loadingService.finished();
        });
      });
    };

    , selectGlobal = () => {

      $rootScope.globally = true;
      this.selectedProject = undefined;
      this.showMenuButtons = undefined;
      $rootScope.$emit('user:selected-global');
    }
    , selectProject = (project, event) => {

      if (event) {

        event.preventDefault();
      }

      $rootScope.globally = undefined;
      this.selectedProject = project;
      $rootScope.$emit('user:selected-project', project);
      this.showMenuButtons = undefined;
      if (event) {

        event.stopPropagation();
      }
    }
    , deleteProject = (project, event) => {

      if (event) {

        event.preventDefault();
      }
      const index = $rootScope.projectsList.indexOf(project);

      this.showMenuButtons = undefined;
      $rootScope.projectsList.splice(index, 1);
      $rootScope.$emit('user:deleted-project', project);
      if (event) {

        event.stopPropagation();
      }
    }
    , chooseProjectDir = () => {

      const dir = $window.dialog.showOpenDialog({
          'properties': [
            'openDirectory'
          ]
        });
      let duplicated = false
       , splitForName;

      if (dir && dir[0]) {
        //check if not a duplicate
        if ($rootScope.projectsList &&
          $rootScope.projectsList.length > 0) {

          $rootScope.projectsList.forEach(element => {

            if (element.path[0] === dir[0]) {

              duplicated = true;
            }
          });
        }

        if (duplicated) {

          return $window.dialog.showErrorBox('Error', 'You already added this folder project');
        }

        if (!duplicated && dir[0].split(/\//g).pop()) {

          splitForName = dir[0].split(/\//g).pop();
          $rootScope.$emit('user:added-new-project', {
            'name': splitForName,
            'path': dir
          });
        } else {

          $window.dialog.showErrorBox('Error', 'Please select a project folder');
        }
      }
    }
    , unregisterOnTotalInstalledPkg = $rootScope.$on('project:total-installed-packages', (eventInfo, data) => {

      if ($rootScope.globally) {

        $rootScope.globalInstalledCount = data;
      }
    })
    , unregisterOnSelectedPackage = $rootScope.$on('user:selected-package', () => {

      this.showMenuButtons = true;
    })
    , unregisterOnNewProject = $rootScope.$on('user:added-new-project', (eventInfo, data) => {

      this.showMenuButtons = undefined;
      $this.$evalAsync(() => {

        $rootScope.projectsList.unshift(data);
        selectProject(data);
      });
    });

    $this.$on('$destroy', () => {

      unregisterOnNewProject();
      unregisterOnSelectedPackage();
      unregisterOnTotalInstalledPkg();
    });

    this.chooseProjectDir = chooseProjectDir;
    this.selectGlobal = selectGlobal;
    this.selectProject = selectProject;
    this.deleteProject = deleteProject;

    this.updatePackage = () => {

      if (this.selectedPackage &&
        this.selectedPackage.latest) {

        this.selectedVersion = this.selectedPackage.latest;

        installVersionPackage();
      } else {

        $window.dialog.showErrorBox('npm', 'The package is already up to latest version');
      }
    };

    this.installVersionPackage = () => {

      this.errorUpdating = undefined;
      this.updating = undefined;
      this.showVersionDialog = true;
      loadingService.finished();
    };

    this.openBrowserLink = url => {

      $window.shell.openExternal(url);
    };

    $rootScope.globally = true;
  });

export default moduleName;
